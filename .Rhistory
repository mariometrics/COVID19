View(df)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(Regioni)
View(Regioni[[4]])
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(Regioni)
View(Regioni[[11]])
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(df)
View(Regioni)
View(Regioni[[1]])
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(appr_flex_date)
appr_flex_date[[1]]
nomi_regioni[count]
end_ep = max(end_ep)
lmt = max(coeff)
end_ep = max(end_ep)
lmt = max(coeff[[]])
View(coeff)
count = count[!is.na(count)]
View(cont)
end_ep = max(end_ep)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
legend
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
legend
cn
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
cn
legend
View(df)
r2_logit[7] - r2_gomp[7]
cn
legend
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
legend_curve
#############################################################################################
##################### PLOTTING RESULTS
############################################################################################
## Where plot?
count = count[!is.na(count)]
## Some stuff to compute legend automatically
legend = c(legend_data[!is.na(legend_data)],legend_curve[!is.na(legend_curve)])
len_leg = length(legend)
legedn
legende
legend
### Outer bounds out of cycle
end_ep = max(end_ep)
lmt = max(lmt)
rm(list=ls())
library(tidyverse)
library(nls2)
library(mixtox)
library(Metrics)
library(MLmetrics)
library(easynls)
library(growthmodels)
library(minpack.lm)
#############################################################################################
##################### LOAD DATA
############################################################################################
url = "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
df = read.csv(url, header = TRUE)
FMT = '%Y-%m-%d %H:%M:%S'
date = levels(df$data)
date = seq(as.Date("2020-02-24"), by=1, len=length(date))
df$data = as.POSIXlt(df$data,format = FMT)$yday
### select which series you want analyze
ser = c("data","deceduti")
N_regioni = 20
### pre-allocation
Regioni = NULL
gomp = NULL
logit = NULL
pred_logi = NULL
pred_gomp = NULL
rmse_logit = NULL
rmse_gomp = NULL
r2_logit = NULL
r2_gomp = NULL
coeff = NULL
predicted = NULL
cn = NULL
pos = NULL
end_ep = NULL
gr = NULL
gr_mean = NULL
dt = NULL
dt_today = NULL
nomi_regioni = NULL
ritardo = NULL
count = NULL
appr_flex_date = NULL
legend_data = NULL
legend_curve = NULL
lmt = NULL
cont = nls.control(minFactor = 1e-10)
## Start calculation
for (i in 1:20) {
### Name region
nomi_regioni[i] = as.character(df$denominazione_regione[df$codice_regione==i][1])
### Extract region
Regioni[[i]] = df[df$codice_regione==i,ser]
Regioni[[i]] = Regioni[[i]][Regioni[[i]]$deceduti>6,]
ritardo[i] = nrow(df[df$codice_regione==3,]) - nrow(Regioni[[i]])
Regioni[[i]]$data = Regioni[[i]]$data - ritardo[i]
### Fit Logistic & Gompertz
if (nrow(Regioni[[i]]) >= 13) {
count[i] = i
print(i)
gomp[[i]] = nls(Regioni[[i]]$deceduti ~ SSgompertz(Regioni[[i]]$data, a, b, c), data = Regioni[[i]])
logit[[i]] = nls(Regioni[[i]]$deceduti ~ SSlogis(Regioni[[i]]$data, a, b, c), data = Regioni[[i]])
print(i)
### RMSE & goodness of fit
pred_logi[[i]] = predict(logit[[i]])
pred_gomp[[i]] = predict(gomp[[i]])
rmse_logit[i] = rmse(Regioni[[i]]$deceduti,pred_logi[[i]])
rmse_gomp[i] = rmse(Regioni[[i]]$deceduti,pred_gomp[[i]])
r2_logit[i] = R2_Score(pred_logi[[i]],Regioni[[i]]$deceduti)
r2_gomp[i] = R2_Score(pred_gomp[[i]],Regioni[[i]]$deceduti)
### Choose between Logistic and Gompertz & find the asymptotic value i.e. the peak
lastday = Regioni[[i]]$data[nrow(Regioni[[i]])]
h = 100 # good for all
newdate = (lastday+1):(lastday+h+1)
if (rmse_logit[i] < rmse_gomp[i] & r2_logit[i] > r2_gomp[i] ) {
coeff[[i]] = coef(logit[[i]])
predicted[[i]] = coeff[[i]][1]/(1 + exp(-(newdate-coeff[[i]][2]))/coeff[[i]][3])
cn[i] = as.character(sprintf("Logistic %s", nomi_regioni[i]))
} else{
coeff[[i]] = coef(gomp[[i]])
predicted[[i]] = coeff[[i]][1]*exp(-coeff[[i]][2]*coeff[[i]][3]^(newdate))
cn[i] = as.character(sprintf("Gompertz %s", nomi_regioni[i]))
}
pos[i] = length(newdate) - length(predicted[[i]][round(predicted[[i]]) > round(coeff[[i]][1], digits = 0)-2])
end_ep[i] = newdate[pos[i]]
### Calculate doubling time
gr[[i]] = diff(Regioni[[i]]$deceduti)/Regioni[[i]]$deceduti[1:nrow(Regioni[[i]])-1]
gr_mean[i] = mean(gr[[i]])
dt[i] = log(2,exp(1))/gr_mean[i]
dt_today[i] = (Regioni[[i]]$data[nrow(Regioni[[i]])] - Regioni[[i]]$data[nrow(Regioni[[i]])-1])*log(2)/(log(Regioni[[i]]$deceduti[nrow(Regioni[[i]])]/Regioni[[i]]$deceduti[nrow(Regioni[[i]])-1]))
### Approximated flex date
appr_flex_date[[i]] = seq(as.Date("2020-01-01"), by=1, len=(end_ep[i]+ritardo[i]))
appr_flex_date[[i]] = appr_flex_date[[i]][length(appr_flex_date[[i]])]
## Stuff for plot
legend_data[i] = sprintf("Real Data %s (%g days before)",nomi_regioni[i],ritardo[i])
legend_curve[i] = sprintf("%s",cn[i])
lmt[i] = coeff[[i]]
}
}
#############################################################################################
##################### PLOTTING RESULTS
############################################################################################
## Where plot?
count = count[!is.na(count)]
## Some stuff to compute legend automatically
legend = c(legend_data[!is.na(legend_data)],legend_curve[!is.na(legend_curve)])
len_leg = length(legend)
### Outer bounds out of cycle
end_ep = max(end_ep)
lmt = max(lmt)
rm(list=ls())
library(tidyverse)
library(nls2)
library(mixtox)
library(Metrics)
library(MLmetrics)
library(easynls)
library(growthmodels)
library(minpack.lm)
#############################################################################################
##################### LOAD DATA
############################################################################################
url = "https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv"
df = read.csv(url, header = TRUE)
FMT = '%Y-%m-%d %H:%M:%S'
date = levels(df$data)
date = seq(as.Date("2020-02-24"), by=1, len=length(date))
df$data = as.POSIXlt(df$data,format = FMT)$yday
### select which series you want analyze
ser = c("data","deceduti")
N_regioni = 20
### pre-allocation
Regioni = NULL
gomp = NULL
logit = NULL
pred_logi = NULL
pred_gomp = NULL
rmse_logit = NULL
rmse_gomp = NULL
r2_logit = NULL
r2_gomp = NULL
coeff = NULL
predicted = NULL
cn = NULL
pos = NULL
end_ep = NULL
gr = NULL
gr_mean = NULL
dt = NULL
dt_today = NULL
nomi_regioni = NULL
ritardo = NULL
count = NULL
appr_flex_date = NULL
legend_data = NULL
legend_curve = NULL
lmt = NULL
cont = nls.control(minFactor = 1e-10)
## Start calculation
for (i in 1:20) {
### Name region
nomi_regioni[i] = as.character(df$denominazione_regione[df$codice_regione==i][1])
### Extract region
Regioni[[i]] = df[df$codice_regione==i,ser]
Regioni[[i]] = Regioni[[i]][Regioni[[i]]$deceduti>6,]
ritardo[i] = nrow(df[df$codice_regione==3,]) - nrow(Regioni[[i]])
Regioni[[i]]$data = Regioni[[i]]$data - ritardo[i]
### Fit Logistic & Gompertz
if (nrow(Regioni[[i]]) >= 13) {
count[i] = i
print(i)
gomp[[i]] = nls(Regioni[[i]]$deceduti ~ SSgompertz(Regioni[[i]]$data, a, b, c), data = Regioni[[i]])
logit[[i]] = nls(Regioni[[i]]$deceduti ~ SSlogis(Regioni[[i]]$data, a, b, c), data = Regioni[[i]])
print(i)
### RMSE & goodness of fit
pred_logi[[i]] = predict(logit[[i]])
pred_gomp[[i]] = predict(gomp[[i]])
rmse_logit[i] = rmse(Regioni[[i]]$deceduti,pred_logi[[i]])
rmse_gomp[i] = rmse(Regioni[[i]]$deceduti,pred_gomp[[i]])
r2_logit[i] = R2_Score(pred_logi[[i]],Regioni[[i]]$deceduti)
r2_gomp[i] = R2_Score(pred_gomp[[i]],Regioni[[i]]$deceduti)
### Choose between Logistic and Gompertz & find the asymptotic value i.e. the peak
lastday = Regioni[[i]]$data[nrow(Regioni[[i]])]
h = 100 # good for all
newdate = (lastday+1):(lastday+h+1)
if (rmse_logit[i] < rmse_gomp[i] & r2_logit[i] > r2_gomp[i] ) {
coeff[[i]] = coef(logit[[i]])
predicted[[i]] = coeff[[i]][1]/(1 + exp(-(newdate-coeff[[i]][2]))/coeff[[i]][3])
cn[i] = as.character(sprintf("Logistic %s", nomi_regioni[i]))
} else{
coeff[[i]] = coef(gomp[[i]])
predicted[[i]] = coeff[[i]][1]*exp(-coeff[[i]][2]*coeff[[i]][3]^(newdate))
cn[i] = as.character(sprintf("Gompertz %s", nomi_regioni[i]))
}
pos[i] = length(newdate) - length(predicted[[i]][round(predicted[[i]]) > round(coeff[[i]][1], digits = 0)-2])
end_ep[i] = newdate[pos[i]]
### Calculate doubling time
gr[[i]] = diff(Regioni[[i]]$deceduti)/Regioni[[i]]$deceduti[1:nrow(Regioni[[i]])-1]
gr_mean[i] = mean(gr[[i]])
dt[i] = log(2,exp(1))/gr_mean[i]
dt_today[i] = (Regioni[[i]]$data[nrow(Regioni[[i]])] - Regioni[[i]]$data[nrow(Regioni[[i]])-1])*log(2)/(log(Regioni[[i]]$deceduti[nrow(Regioni[[i]])]/Regioni[[i]]$deceduti[nrow(Regioni[[i]])-1]))
### Approximated flex date
appr_flex_date[[i]] = seq(as.Date("2020-01-01"), by=1, len=(end_ep[i]+ritardo[i]))
appr_flex_date[[i]] = appr_flex_date[[i]][length(appr_flex_date[[i]])]
## Stuff for plot
legend_data[i] = sprintf("Real Data %s (%g days before)",nomi_regioni[i],ritardo[i])
legend_curve[i] = sprintf("%s",cn[i])
lmt[i] = coeff[[i]]
}
}
#############################################################################################
##################### PLOTTING RESULTS
############################################################################################
## Where plot?
count = count[!is.na(count)]
## Some stuff to compute legend automatically
legend = c(legend_data[!is.na(legend_data)],legend_curve[!is.na(legend_curve)])
len_leg = length(legend)
max(lmt)
max(lmt[!is.na(lmt)])
lmt = max(lmt[!is.na(lmt)])
end_ep = max(end_ep[!is.na(end_ep)])
color = c(count,count)
lty = rep(1,length(count))
lty[1:length(count)] = NA
lty = rep(1,len_leg)
lty[1:length(count)] = NA
pch = rep(1,len_leg)
pch[1:length(count)] = NA
pch
pch = rep(16,len_leg)
pch[length(count):len_leg] = NA
pch
pch = rep(16,len_leg)
pch[length(count)+1:len_leg] = NA
View(Regioni[count])
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
install.packages("circlize")
color = rand_color(length(count))
install.packages("randomcoloR")
color = randomColor(length(count))
color = randomColor(length(count))
install.packages("randomcoloR")
color = randomColor(length(count))
install.packages("randomcoloR")
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
install.packages(c("randomcoloR", "V8"))
install.packages(c("V8", "randomcoloR"))
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
install.packages("randomcoloR")
install.packages("randomcoloR")
color = randomcoloR::randomColor(length(count))
color = c(color,color)
lty = rep(1,len_leg)
lty[1:length(count)] = NA
pch = rep(16,len_leg)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
rm(list=ls())
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
round(end_ep, digits = -3)
round(end_ep, digits = -2)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
round(end_ep, digits = -1)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
color[count] = 1:length(count)
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
DT_text
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
toString(x = DT_text)
paste(DT_text, collapse = "")
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
date
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/it_hu_comparison.R')
View(Aggregated_deaths)
View(Deaths)
Italy_deaths
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(df)
View(Regioni)
View(Regioni[[11]])
View(Regioni[[3]])
View(Regioni)
View(Regioni[[8]])
View(Regioni[[1]])
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
source('~/git/mariometrics-git/COVID19/covid_automatic.R')
View(Regioni)
View(Regioni[[4]])
View(df)
View(Regioni)
View(Regioni[[4]])
